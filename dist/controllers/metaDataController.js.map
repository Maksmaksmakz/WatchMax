{"version":3,"sources":["../../src/controllers/metaDataController.js"],"names":["router","Router","post","req","res","console","log","newMetaData","version","body","downloadLink","forceMetaData","find","err","metaData","status","send","length","json","message","save","put","findById","params","id","get","metaDatas","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AAEA;;;;;;AAHA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;;AAKAD,OAAOE,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7BC,UAAQC,GAAR,CAAY,0BAAZ;AACA,MAAMC,cAAc,wBAApB;AACAA,cAAYC,OAAZ,GAAsBL,IAAIM,IAAJ,CAASD,OAA/B;AACAD,cAAYG,YAAZ,GAA2BP,IAAIM,IAAJ,CAASC,YAApC;AACAH,cAAYI,aAAZ,GAA4BR,IAAIM,IAAJ,CAASE,aAArC;;AAEA,qBAASC,IAAT,CAAc,EAAd,EAAkB,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACnC,QAAGD,GAAH,EAAO;AACLT,UAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,iCAAmDH,GAAnD;AACA;AACD;AACD,QAAGC,SAASG,MAAT,GAAkB,CAArB,EAAwB;AACtBb,UAAIc,IAAJ,CAAS,EAACC,SAAS,0CAAV,EAAT;AACA;AACD,KAHD,MAGM;AACJZ,kBAAYa,IAAZ,CAAiB,eAAO;AACtB,YAAGP,GAAH,EAAO;AACLT,cAAIY,IAAJ,CAASH,GAAT;AACD;AACDT,YAAIc,IAAJ,CAAS,EAACC,SAAS,kBAAV,EAAT;AACD,OALD;AAMD;AACF,GAhBD;AAiBD,CAxBD;;AA0BAnB,OAAOqB,GAAP,CAAW,MAAX,EAAmB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC7B,qBAASkB,QAAT,CAAkBnB,IAAIoB,MAAJ,CAAWC,EAA7B,EAAiC,UAACX,GAAD,EAAMC,QAAN,EAAmB;AAClD,QAAGD,GAAH,EAAQ;AACNT,UAAIY,IAAJ,CAASH,GAAT;AACD;AACDC,aAASN,OAAT,GAAmBL,IAAIM,IAAJ,CAASD,OAA5B;AACAM,aAASJ,YAAT,GAAwBP,IAAIM,IAAJ,CAASC,YAAjC;AACAI,aAASH,aAAT,GAAyBR,IAAIM,IAAJ,CAASE,aAAlC;AACAG,aAASM,IAAT,CAAc,eAAO;AACnB,UAAGP,GAAH,EAAO;AACLT,YAAIY,IAAJ,CAASH,GAAT;AACD;AACDT,UAAIc,IAAJ,CAAS,EAAEC,SAAS,kBAAX,EAAT;AACD,KALD;AAMD,GAbD;AAcD,CAfH;;AAiBAnB,OAAOyB,GAAP,CAAW,GAAX,EAAgB,UAACtB,GAAD,EAAMC,GAAN,EAAc;AAC5BC,UAAQC,GAAR,CAAY,aAAZ;AACA,qBAASM,IAAT,CAAc,EAAd,EAAkB,UAACC,GAAD,EAAMa,SAAN,EAAoB;AACpC,QAAGb,GAAH,EAAO;AACLT,UAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,8BAAgDH,GAAhD;AACA;AACD;AACDT,QAAIc,IAAJ,CAASQ,SAAT;AACD,GAND;AAOD,CATD;;AAWAC,OAAOC,OAAP,GAAiB5B,MAAjB","file":"metaDataController.js","sourcesContent":["import express from \"express\"\nconst router = express.Router()\nimport bodyParser from \"body-parser\"\n\nimport MetaData from \"../models/metaData\"\n\nrouter.post(\"/\", (req, res) => {\n  console.log(\"post request to metaData\")\n  const newMetaData = new MetaData()\n  newMetaData.version = req.body.version\n  newMetaData.downloadLink = req.body.downloadLink\n  newMetaData.forceMetaData = req.body.forceMetaData\n\n  MetaData.find({}, (err, metaData) => {\n    if(err){\n      res.status(500).send(`Couldn get metaData Error: ${err}`)\n      return\n    }\n    if(metaData.length > 0) {\n      res.json({message: \"MetaData already Exists. Use Put Request\"})\n      return\n    }elseÂ {\n      newMetaData.save(err => {\n        if(err){\n          res.send(err)\n        }\n        res.json({message: \"MetaData created\"})\n      })\n    }\n  })\n})\n\nrouter.put(\"/:id\", (req, res) => {\n    MetaData.findById(req.params.id, (err, metaData) => {\n      if(err) {\n        res.send(err)\n      }\n      metaData.version = req.body.version\n      metaData.downloadLink = req.body.downloadLink\n      metaData.forceMetaData = req.body.forceMetaData\n      metaData.save(err => {\n        if(err){\n          res.send(err)\n        }\n        res.json({ message: \"metaData updated\" })\n      })\n    })\n  })\n\nrouter.get(\"/\", (req, res) => {\n  console.log(\"get request\")\n  MetaData.find({}, (err, metaDatas) => {\n    if(err){\n      res.status(500).send(`Couldn get users Error: ${err}`)\n      return\n    }\n    res.json(metaDatas)\n  })\n})\n\nmodule.exports = router\n"]}