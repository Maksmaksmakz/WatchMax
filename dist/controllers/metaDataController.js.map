{"version":3,"sources":["../../src/controllers/metaDataController.js"],"names":["router","Router","post","req","res","console","log","newMetaData","version","body","downloadLink","forceUpdate","find","err","metaData","status","send","length","json","message","save","put","metaDatas","metadata","metadatas","pushToAllDevices","title","get","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AAEA;;;;;;AAHA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;;AAKA;AACAD,OAAOE,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7BC,UAAQC,GAAR,CAAY,0BAAZ;AACA,MAAMC,cAAc,wBAApB;AACAA,cAAYC,OAAZ,GAAsBL,IAAIM,IAAJ,CAASD,OAA/B;AACAD,cAAYG,YAAZ,GAA2BP,IAAIM,IAAJ,CAASC,YAApC;AACAH,cAAYI,WAAZ,GAA0BR,IAAIM,IAAJ,CAASE,WAAnC;;AAEA,qBAASC,IAAT,CAAc,EAAd,EAAkB,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACnC,QAAGD,GAAH,EAAO;AACLT,UAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,iCAAmDH,GAAnD;AACA;AACD;AACD,QAAGC,SAASG,MAAT,GAAkB,CAArB,EAAwB;AACtBb,UAAIc,IAAJ,CAAS,EAACC,SAAS,0CAAV,EAAT;AACA;AACD,KAHD,MAGM;AACJZ,kBAAYa,IAAZ,CAAiB,eAAO;AACtB,YAAGP,GAAH,EAAO;AACLT,cAAIY,IAAJ,CAASH,GAAT;AACD;AACDT,YAAIc,IAAJ,CAAS,EAACC,SAAS,kBAAV,EAAT;AACD,OALD;AAMD;AACF,GAhBD;AAiBD,CAxBD;AAyBA;AACAnB,OAAOqB,GAAP,CAAW,GAAX,EAAgB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC5BC,UAAQC,GAAR,CAAY,yBAAZ;AACE,qBAASM,IAAT,CAAc,EAAd,EAAkB,UAACC,GAAD,EAAMS,SAAN,EAAoB;AACpC,QAAGT,GAAH,EAAQ;AACNT,UAAIY,IAAJ,CAASH,GAAT;AACD;AACDU,eAAWC,UAAU,CAAV,CAAX;AACA,QAAGV,SAASN,OAAT,GAAmBL,IAAIM,IAAJ,CAASD,OAA/B,EAAwC;AACtCiB,uBACE;AACE,eAAQ,KADV;AAEE,gBAAS;AAFX,OADF,EAKE;AACEC,eAAQ,iBADV;AAEEjB,cAAO;AAFT,OALF;AAUD;AACDK,aAASN,OAAT,GAAmBL,IAAIM,IAAJ,CAASD,OAA5B;AACAM,aAASJ,YAAT,GAAwBP,IAAIM,IAAJ,CAASC,YAAjC;AACAI,aAASH,WAAT,GAAuBR,IAAIM,IAAJ,CAASE,WAAhC;AACAG,aAASM,IAAT,CAAc,eAAO;AACnB,UAAGP,GAAH,EAAO;AACLT,YAAIY,IAAJ,CAASH,GAAT;AACD;AACHT,UAAIc,IAAJ,CAAS,EAAEC,SAAS,kBAAX,EAAT;AACD,KALC;AAMH,GA1BC;AA2BH,CA7BD;AA8BA;AACAnB,OAAO2B,GAAP,CAAW,GAAX,EAAgB,UAACxB,GAAD,EAAMC,GAAN,EAAc;AAC5BC,UAAQC,GAAR,CAAY,yBAAZ;AACA,qBAASM,IAAT,CAAc,EAAd,EAAkB,UAACC,GAAD,EAAMS,SAAN,EAAoB;AACpC,QAAGT,GAAH,EAAO;AACLT,UAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,8BAAgDH,GAAhD;AACA;AACD;AACDT,QAAIc,IAAJ,CAASI,UAAU,CAAV,CAAT;AACD,GAND;AAOD,CATD;;AAWAM,OAAOC,OAAP,GAAiB7B,MAAjB","file":"metaDataController.js","sourcesContent":["import express from \"express\"\nconst router = express.Router()\nimport bodyParser from \"body-parser\"\n\nimport MetaData from \"../models/metaData\"\n\n// POST \"api/v1/metaData\" - Create metaData\nrouter.post(\"/\", (req, res) => {\n  console.log(\"post request to metaData\")\n  const newMetaData = new MetaData()\n  newMetaData.version = req.body.version\n  newMetaData.downloadLink = req.body.downloadLink\n  newMetaData.forceUpdate = req.body.forceUpdate\n\n  MetaData.find({}, (err, metaData) => {\n    if(err){\n      res.status(500).send(`Couldn get metaData Error: ${err}`)\n      return\n    }\n    if(metaData.length > 0) {\n      res.json({message: \"MetaData already Exists. Use Put Request\"})\n      return\n    }elseÂ {\n      newMetaData.save(err => {\n        if(err){\n          res.send(err)\n        }\n        res.json({message: \"MetaData created\"})\n      })\n    }\n  })\n})\n// PUT \"api/v1/metaData\" - Update MetaData\nrouter.put(\"/\", (req, res) => {\n  console.log(\"put request to metaData\")\n    MetaData.find({}, (err, metaDatas) => {\n      if(err) {\n        res.send(err)\n      }\n      metadata = metadatas[0]\n      if(metaData.version < req.body.version) {\n        pushToAllDevices(\n          {\n            \"bla\" : \"Max\",\n            \"test\" : \"ist toll\"\n          },\n          {\n            title : \"Max ist fleiÃŸig\",\n            body : \"Max hat eine neue Version hochgeladen.\",\n          }\n        )\n      }\n      metaData.version = req.body.version\n      metaData.downloadLink = req.body.downloadLink\n      metaData.forceUpdate = req.body.forceUpdate\n      metaData.save(err => {\n        if(err){\n          res.send(err)\n        }\n      res.json({ message: \"metaData updated\" })\n    })\n  })\n})\n// GET \"api/v1/metaData\" - GetMetaData\nrouter.get(\"/\", (req, res) => {\n  console.log(\"get request to metaData\")\n  MetaData.find({}, (err, metaDatas) => {\n    if(err){\n      res.status(500).send(`Couldn get users Error: ${err}`)\n      return\n    }\n    res.json(metaDatas[0])\n  })\n})\n\nmodule.exports = router\n"]}